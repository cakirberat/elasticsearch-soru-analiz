import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext
import re
from es_search import benzer_sorulari_bul, load_stopwords, save_stopwords, refresh_stopwords
from performance_monitor import monitor_performance, print_performance_summary, save_performance_metrics
from performance_analyzer import PerformanceAnalyzer
from ml_analyzer import MLAnalyzer
import threading
import time

class Tooltip:
    """Tooltip sƒ±nƒ±fƒ± - butonlara a√ßƒ±klayƒ±cƒ± ipu√ßlarƒ± ekler"""
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip = None
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)
    
    def show_tooltip(self, event=None):
        x, y, _, _ = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 20
        
        self.tooltip = tk.Toplevel(self.widget)
        self.tooltip.wm_overrideredirect(True)
        self.tooltip.wm_geometry(f"+{x}+{y}")
        
        label = tk.Label(self.tooltip, text=self.text, 
                        bg="#ffffe0", relief="solid", borderwidth=1,
                        font=("Arial", 9), padx=5, pady=3)
        label.pack()
    
    def hide_tooltip(self, event=None):
        if self.tooltip:
            self.tooltip.destroy()
            self.tooltip = None

class SoruAramaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üîç Soru Arama ve Stopwords Y√∂netimi")
        self.root.configure(bg="#f0f4f8")
        self.root.geometry("1200x800")
        
        # Durum deƒüi≈ükenleri
        self.is_searching = False
        self.search_thread = None
        
        # Stopwords y√ºkle
        self.stopwords = set(load_stopwords())
        
        # UI olu≈ütur
        self.setup_ui()
        
        # Tooltip'leri ekle
        self.add_tooltips()
        
    def setup_ui(self):
        """Kullanƒ±cƒ± aray√ºz√ºn√º olu≈üturur"""
        # Ana ba≈ülƒ±k
        title = tk.Label(self.root, text="üîç Soru Arama ve Stopwords Y√∂netimi", 
                        font=("Arial", 20, "bold"), fg="#2a5298", bg="#f0f4f8")
        title.grid(row=0, column=0, columnspan=4, pady=(15, 10))

        # Analiz y√∂ntemi se√ßimi
        tk.Label(self.root, text="Analiz Y√∂ntemi:", font=("Arial", 12, "bold"), 
                bg="#f0f4f8", fg="#333").grid(row=1, column=0, sticky="e", padx=5)
        
        self.analiz_yontemi = tk.StringVar(value="elasticsearch")
        tk.Radiobutton(self.root, text="üîç Elasticsearch", variable=self.analiz_yontemi, 
                      value="elasticsearch", bg="#f0f4f8", font=("Arial", 11), 
                      fg="#2a5298").grid(row=1, column=1, sticky="w", padx=5)
        tk.Radiobutton(self.root, text="ü§ñ Machine Learning", variable=self.analiz_yontemi, 
                      value="machine_learning", bg="#f0f4f8", font=("Arial", 11), 
                      fg="#e74c3c").grid(row=1, column=2, sticky="w", padx=5)
        
        # Soru arama b√∂l√ºm√º
        tk.Label(self.root, text="Soru Girin:", font=("Arial", 12, "bold"), 
                bg="#f0f4f8", fg="#333").grid(row=2, column=0, sticky="e", padx=5)
        
        self.soru_entry = tk.Entry(self.root, width=50, font=("Arial", 11))
        self.soru_entry.grid(row=2, column=1, columnspan=2, sticky="we", padx=5, pady=5)
        self.soru_entry.bind("<Return>", lambda e: self.soru_ara())  # Enter tu≈üu ile arama
        
        self.ara_button = tk.Button(self.root, text="üîç Ara", command=self.soru_ara, 
                                   width=10, bg="#2a5298", fg="white", 
                                   font=("Arial", 11, "bold"), activebackground="#1e3c72",
                                   cursor="hand2")
        self.ara_button.grid(row=2, column=3, padx=5)
        
        # E≈üik deƒüeri
        tk.Label(self.root, text="E≈üik Deƒüeri:", font=("Arial", 11), 
                bg="#f0f4f8").grid(row=3, column=0, sticky="e", padx=5)
        
        self.esik_var = tk.DoubleVar(value=0.75)
        self.esik_entry = tk.Entry(self.root, textvariable=self.esik_var, 
                                  width=10, font=("Arial", 11))
        self.esik_entry.grid(row=3, column=1, sticky="w", pady=5)
        
        self.temizle_button = tk.Button(self.root, text="üóëÔ∏è Temizle", command=self.sonuc_temizle, 
                                       bg="#e17055", fg="white", font=("Arial", 10, "bold"), 
                                       activebackground="#d35400", cursor="hand2")
        self.temizle_button.grid(row=3, column=3, padx=5, pady=5)


        
        # Durum etiketi
        self.status_label = tk.Label(self.root, text="Hazƒ±r", font=("Arial", 10), 
                                    fg="#666", bg="#f0f4f8")
        self.status_label.grid(row=5, column=0, columnspan=4, pady=(0, 10))

        # Sonu√ßlar
        tk.Label(self.root, text="Arama Sonu√ßlarƒ±:", font=("Arial", 12, "bold"), 
                bg="#f0f4f8", fg="#2a5298").grid(row=6, column=0, sticky="nw", pady=(10,0), padx=5)
        
        self.sonuc_text = scrolledtext.ScrolledText(self.root, width=90, height=18, 
                                                   font=("Consolas", 11), bg="#e3f2fd", 
                                                   fg="#222", borderwidth=2, relief="groove")
        self.sonuc_text.grid(row=7, column=0, columnspan=4, padx=5, pady=(0,10), sticky="nsew")

        # Stopwords y√∂netimi
        tk.Label(self.root, text="Stopwords Listesi:", font=("Arial", 12, "bold"), 
                bg="#f0f4f8", fg="#2a5298").grid(row=8, column=0, sticky="w", padx=5)
        
        self.stopwords_search = tk.Entry(self.root, width=20, font=("Arial", 10))
        self.stopwords_search.grid(row=8, column=1, sticky="w", pady=5)
        self.stopwords_search.bind("<KeyRelease>", self.stopwords_ara)
        self.stopwords_search.bind("<Return>", lambda e: self.stopword_ekle())  # Enter ile ekleme
        
        self.stopwords_listbox = tk.Listbox(self.root, width=40, height=10, 
                                           font=("Arial", 10), bg="#fffbe7", fg="#444", 
                                           borderwidth=2, relief="ridge", selectbackground="#ffe082")
        self.stopwords_listbox.grid(row=9, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")
        self.stopwords_guncelle()

        self.ekle_button = tk.Button(self.root, text="‚ûï Stopword Ekle", command=self.stopword_ekle, 
                                    bg="#00b894", fg="white", font=("Arial", 10, "bold"), 
                                    activebackground="#00b894", cursor="hand2")
        self.ekle_button.grid(row=9, column=2, sticky="n", padx=5)
        
        self.sil_button = tk.Button(self.root, text="üóëÔ∏è Se√ßili Stopword'√º Sil", command=self.stopword_sil, 
                                   bg="#d63031", fg="white", font=("Arial", 10, "bold"), 
                                   activebackground="#b71c1c", cursor="hand2")
        self.sil_button.grid(row=9, column=3, sticky="n", padx=5)

        # Performans butonlarƒ±
        tk.Label(self.root, text="Performans:", font=("Arial", 12, "bold"), 
                bg="#f0f4f8", fg="#2a5298").grid(row=10, column=0, sticky="w", padx=5, pady=(10,0))
        
        self.performans_ozet_button = tk.Button(self.root, text="üìä Performans √ñzeti", 
                                               command=self.performans_ozeti_goster, 
                                               bg="#9b59b6", fg="white", font=("Arial", 10, "bold"), 
                                               activebackground="#8e44ad", cursor="hand2")
        self.performans_ozet_button.grid(row=10, column=1, sticky="w", padx=5, pady=(10,0))
        
        self.performans_kaydet_button = tk.Button(self.root, text="üíæ Metrikleri Kaydet", 
                                                 command=self.performans_kaydet, 
                                                 bg="#e67e22", fg="white", font=("Arial", 10, "bold"), 
                                                 activebackground="#d35400", cursor="hand2")
        self.performans_kaydet_button.grid(row=10, column=2, sticky="w", padx=5, pady=(10,0))
        
        self.performans_tahmin_button = tk.Button(self.root, text="üîÆ Performans Tahmini", 
                                                 command=self.performans_tahmini_goster, 
                                                 bg="#e74c3c", fg="white", font=("Arial", 10, "bold"), 
                                                 activebackground="#c0392b", cursor="hand2")
        self.performans_tahmin_button.grid(row=10, column=3, sticky="w", padx=5, pady=(10,0))

        # Grid ayarlarƒ±
        for i in range(4):
            self.root.grid_columnconfigure(i, weight=1)
        self.root.grid_rowconfigure(7, weight=1)
        self.root.grid_rowconfigure(9, weight=1)
        
    def add_tooltips(self):
        """Butonlara tooltip'ler ekler"""
        Tooltip(self.ara_button, "Se√ßilen y√∂ntemle soru aramasƒ± yapar")
        Tooltip(self.temizle_button, "Arama sonu√ßlarƒ±nƒ± temizler")
        Tooltip(self.ekle_button, "Yeni stopword ekler")
        Tooltip(self.sil_button, "Se√ßili stopword'√º siler")
        Tooltip(self.performans_ozet_button, "Sistem performans √∂zetini g√∂sterir")
        Tooltip(self.performans_kaydet_button, "Performans metriklerini kaydeder")
        Tooltip(self.performans_tahmin_button, "Gelecek performans tahminini g√∂sterir")
        
    def update_status(self, message, color="#666"):
        """Durum mesajƒ±nƒ± g√ºnceller"""
        self.status_label.config(text=message, fg=color)
        self.root.update_idletasks()
        


    def soru_ara(self):
        """Soru arama fonksiyonu"""
        if self.is_searching:
            messagebox.showwarning("Uyarƒ±", "Arama zaten devam ediyor. L√ºtfen bekleyin.")
            return
            
        soru = self.soru_entry.get()
        if not soru.strip():
            messagebox.showwarning("Uyarƒ±", "L√ºtfen bir soru girin.")
            return
            
        try:
            esik = float(self.esik_var.get())
            if esik < 0 or esik > 1:
                messagebox.showerror("Hata", "E≈üik deƒüeri 0 ile 1 arasƒ±nda olmalƒ±.")
                return
        except ValueError:
            messagebox.showerror("Hata", "E≈üik deƒüeri sayƒ± olmalƒ±.")
            return
            
        # Analiz y√∂ntemini kontrol et
        yontem = self.analiz_yontemi.get()
        
        # Arama i≈ülemini thread'de √ßalƒ±≈ütƒ±r
        self.is_searching = True
        self.ara_button.config(state="disabled", text="üîç Aranƒ±yor...")
        self.search_thread = threading.Thread(target=self._perform_search, args=(soru, esik, yontem))
        self.search_thread.daemon = True
        self.search_thread.start()
        
    def _perform_search(self, soru, esik, yontem):
        """Arama i≈ülemini ger√ßekle≈ütirir (thread'de √ßalƒ±≈üƒ±r)"""
        try:
            import io, sys
            old_stdout = sys.stdout
            sys.stdout = mystdout = io.StringIO()
            
            if yontem == "elasticsearch":
                print("üîç Elasticsearch ile analiz yapƒ±lƒ±yor...")
                benzer_sorulari_bul(soru, esik=esik)
            elif yontem == "machine_learning":
                print("ü§ñ Machine Learning ile analiz yapƒ±lƒ±yor...")
                self.ml_analiz_yap(soru, esik)
            else:
                print("‚ùå Ge√ßersiz analiz y√∂ntemi")
                return
                
            sys.stdout = old_stdout
            result = mystdout.getvalue()
            
            # Sonucu UI'da g√∂ster
            self.root.after(0, lambda: self._show_search_result(result))
            
        except Exception as e:
            error_msg = f"Arama sƒ±rasƒ±nda hata olu≈ütu: {e}"
            self.root.after(0, lambda: self._show_search_error(error_msg))
        finally:
            self.root.after(0, self._finish_search)
            
    def _show_search_result(self, result):
        """Arama sonucunu g√∂sterir"""
        self.sonuc_text.delete(1.0, tk.END)
        self.sonuc_text.insert(tk.END, result)
        self.update_status("Arama tamamlandƒ±", "#27ae60")
        
    def _show_search_error(self, error_msg):
        """Arama hatasƒ±nƒ± g√∂sterir"""
        messagebox.showerror("Arama Hatasƒ±", error_msg)
        self.update_status("Arama hatasƒ±", "#e74c3c")
        
    def _finish_search(self):
        """Arama i≈ülemini sonlandƒ±rƒ±r"""
        self.is_searching = False
        self.ara_button.config(state="normal", text="üîç Ara")
        self.update_status("Hazƒ±r", "#666")

    def ml_analiz_yap(self, soru, esik):
        """ML analizi yapar"""
        try:
            analyzer = MLAnalyzer()
            # Verileri y√ºkle ve modeli hazƒ±rla
            if not analyzer.load_questions_from_db():
                print("‚ùå Veritabanƒ±ndan sorular y√ºklenemedi")
                return
                
            analyzer.clean_questions()
            
            # Model y√ºkle veya eƒüit
            if not analyzer.load_model():
                analyzer.train_model()
            
            # Benzer sorularƒ± bul
            benzer_sorular = analyzer.find_similar_questions_ml(soru, threshold=esik)
            
            print(f"ü§ñ ML Analizi Sonu√ßlarƒ± (E≈üik: {esik}):")
            print("="*60)
            
            if benzer_sorular:
                for i, result in enumerate(benzer_sorular, 1):
                    print(f"{i}. Benzerlik: {result['benzerlik']:.3f} ({result['yuzde']:.1f}%)")
                    print(f"   Soru: {result['soru']}")
                    print("-" * 40)
            else:
                print("‚ùå Benzer soru bulunamadƒ±.")
                
        except Exception as e:
            print(f"‚ùå ML analizi hatasƒ±: {e}")

    def sonuc_temizle(self):
        """Sonu√ßlarƒ± temizler"""
        self.sonuc_text.delete(1.0, tk.END)
        self.update_status("Sonu√ßlar temizlendi", "#f39c12")

    def stopwords_ara(self, event=None):
        """Stopwords listesinde arama yapar"""
        search_term = self.stopwords_search.get().lower()
        self.stopwords_listbox.delete(0, tk.END)
        
        for stopword in self.stopwords:
            if search_term in stopword.lower():
                self.stopwords_listbox.insert(tk.END, stopword)

    def stopwords_guncelle(self):
        """Stopwords listesini g√ºnceller"""
        self.stopwords_listbox.delete(0, tk.END)
        for stopword in sorted(self.stopwords):
            self.stopwords_listbox.insert(tk.END, stopword)

    def stopword_ekle(self):
        """Yeni stopword ekler"""
        new_stopword = self.stopwords_search.get().strip().lower()
        if not new_stopword:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen bir stopword girin.")
            return
            
        if new_stopword in self.stopwords:
            messagebox.showinfo("Bilgi", "Bu stopword zaten mevcut.")
            return
            
        self.stopwords.add(new_stopword)
        save_stopwords(sorted(self.stopwords))
        # Arama motorunun kullandƒ±ƒüƒ± global stopwords listesini yenile
        try:
            refresh_stopwords()
        except Exception:
            pass
        self.stopwords_guncelle()
        self.stopwords_search.delete(0, tk.END)
        self.update_status(f"'{new_stopword}' stopword olarak eklendi", "#27ae60")

    def stopword_sil(self):
        """Se√ßili stopword'√º siler"""
        selection = self.stopwords_listbox.curselection()
        if not selection:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen silinecek stopword'√º se√ßin.")
            return
            
        stopword = self.stopwords_listbox.get(selection[0])
        result = messagebox.askyesno("Onay", f"'{stopword}' stopword'√ºn√º silmek istediƒüinizden emin misiniz?")
        
        if result:
            self.stopwords.remove(stopword)
            save_stopwords(sorted(self.stopwords))
            # Arama motorunun kullandƒ±ƒüƒ± global stopwords listesini yenile
            try:
                refresh_stopwords()
            except Exception:
                pass
            self.stopwords_guncelle()
            self.update_status(f"'{stopword}' stopword olarak silindi", "#e74c3c")

    def performans_ozeti_goster(self):
        """Performans √∂zetini g√∂sterir"""
        try:
            import io, sys
            
            # Performans verisi var mƒ± kontrol et
            from performance_monitor import performance_monitor
            if not performance_monitor.metrics:
                messagebox.showinfo("Performans Verisi Yok", 
                    "Hen√ºz hi√ßbir performans verisi toplanmamƒ±≈ü.\n\n"
                    "Performans √∂zeti g√∂rmek i√ßin √∂nce soru arama yapƒ±n.")
                return
            
            # √áƒ±ktƒ±yƒ± yakala
            old_stdout = sys.stdout
            sys.stdout = mystdout = io.StringIO()
            print_performance_summary()
            sys.stdout = old_stdout
            
            summary = mystdout.getvalue()
            
            # Yeni pencerede g√∂ster
            summary_window = tk.Toplevel(self.root)
            summary_window.title("üìä Performans √ñzeti")
            summary_window.configure(bg="#f0f4f8")
            summary_window.geometry("800x600")
            
            # Ba≈ülƒ±k
            tk.Label(summary_window, text="üìä Performans √ñzeti", 
                    font=("Arial", 16, "bold"), fg="#2a5298", bg="#f0f4f8").pack(pady=10)
            
            text_widget = scrolledtext.ScrolledText(summary_window, width=90, height=30, 
                                                   font=("Consolas", 10), bg="#e3f2fd", fg="#222")
            text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            text_widget.insert(tk.END, summary)
            text_widget.config(state=tk.DISABLED)
            
            # Kapat butonu
            tk.Button(summary_window, text="‚ùå Kapat", command=summary_window.destroy,
                     bg="#e74c3c", fg="white", font=("Arial", 11, "bold")).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("Hata", f"Performans √∂zeti g√∂sterilirken hata olu≈ütu:\n{e}")

    def performans_kaydet(self):
        """Performans metriklerini kaydeder"""
        try:
            # Performans verisi var mƒ± kontrol et
            from performance_monitor import performance_monitor
            if not performance_monitor.metrics:
                messagebox.showinfo("Metrik Verisi Yok", 
                    "Hen√ºz hi√ßbir performans verisi toplanmamƒ±≈ü.\n\n"
                    "Metrikleri kaydetmek i√ßin √∂nce soru arama yapƒ±n.")
                return
            
            save_performance_metrics()
            messagebox.showinfo("Ba≈üarƒ±lƒ±", 
                "‚úÖ Performans metrikleri ba≈üarƒ±yla kaydedildi!\n\n"
                "üìÅ Dosya: 'performance_metrics.json'\n"
                "üìç Konum: Proje ana dizini")
            
        except Exception as e:
            messagebox.showerror("Hata", f"Metrikler kaydedilirken hata olu≈ütu:\n{e}")

    def performans_tahmini_goster(self):
        """Performans tahminini g√∂sterir"""
        try:
            # Performans verisi var mƒ± kontrol et
            from performance_monitor import performance_monitor
            if not performance_monitor.metrics:
                messagebox.showinfo("Metrik Verisi Yok", 
                    "Hen√ºz hi√ßbir performans verisi toplanmamƒ±≈ü.\n\n"
                    "Performans tahmini g√∂rmek i√ßin √∂nce soru arama yapƒ±n.")
                return
            
            analyzer = PerformanceAnalyzer()
            # Mevcut performansƒ± analiz et
            analyzer.analyze_current_performance()

            # Hedef veri miktarƒ±nƒ± kullanƒ±cƒ±dan al
            target = simpledialog.askinteger(
                "Hedef Veri Miktarƒ±",
                "Tahmin yapƒ±lacak veri miktarƒ±nƒ± girin (√∂r. 10000):",
                minvalue=1,
                initialvalue=10000,
                parent=self.root,
            )
            if not target:
                return

            # Tahminleri hesapla
            predictions = analyzer.predict_performance(target)
            
            # Yeni pencerede g√∂ster
            prediction_window = tk.Toplevel(self.root)
            prediction_window.title("üîÆ Performans Tahmini")
            prediction_window.configure(bg="#f0f4f8")
            prediction_window.geometry("600x400")
            
            # Ba≈ülƒ±k
            tk.Label(prediction_window, text="üîÆ Performans Tahmini", 
                    font=("Arial", 16, "bold"), fg="#2a5298", bg="#f0f4f8").pack(pady=10)
            
            text_widget = scrolledtext.ScrolledText(prediction_window, width=70, height=20, 
                                                   font=("Consolas", 10), bg="#e3f2fd", fg="#222")
            text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            # Metin √ßƒ±ktƒ±sƒ±nƒ± hazƒ±rla
            if not predictions:
                text_widget.insert(tk.END, "Tahmin √ºretilemedi. Yeterli veri olmayabilir.")
            else:
                lines = []
                lines.append(f"Hedef veri miktarƒ±: {target:,}\n")
                for op_name, pred in predictions.items():
                    lines.append(f"[ {op_name} ]")
                    lines.append(f"  ‚è±Ô∏è S√ºre (sn): {pred['predicted_duration']:.2f}")
                    lines.append(f"  ‚è±Ô∏è S√ºre (dk): {pred['predicted_duration']/60:.2f}")
                    if pred['predicted_duration'] > 3600:
                        lines.append(f"  ‚è±Ô∏è S√ºre (saat): {pred['predicted_duration']/3600:.2f}")
                    lines.append(f"  üíæ Tahmini Bellek (MB): {pred['predicted_memory']:.2f}")
                    lines.append(f"  G√ºven aralƒ±ƒüƒ± (sn): {pred['confidence_min']:.2f} - {pred['confidence_max']:.2f}\n")
                text_widget.insert(tk.END, "\n".join(lines))
            text_widget.config(state=tk.DISABLED)
            
            # Kapat butonu
            tk.Button(prediction_window, text="‚ùå Kapat", command=prediction_window.destroy,
                     bg="#e74c3c", fg="white", font=("Arial", 11, "bold")).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("Hata", f"Performans tahmini g√∂sterilirken hata olu≈ütu:\n{e}")

def main():
    """Ana fonksiyon"""
    root = tk.Tk()
    app = SoruAramaApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()